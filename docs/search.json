[{"path":"/articles/age_simulation.html","id":"cohort-evolution","dir":"Articles","previous_headings":"","what":"Cohort evolution","title":"Modelling of age-at-size data","text":"describe population density \\(u(l,t)\\) \\(l>l_0\\) (\\(l_0\\) egg size) PDE \\[ \\frac{\\partial u}{\\partial t} = -\\frac{\\partial J}{\\partial l} - \\mu u\\] flux \\(J\\) \\[ J(l) = k(L_\\infty^{0} - l) u - \\alpha l \\frac{\\partial u}{\\partial l}\\] mortality \\(\\mu\\) \\(\\mu_0 / l\\). positive parameters \\(k, L_\\infty^0, d\\) \\(\\mu_0\\) need estimated data. superscript \\(0\\) \\(L_\\infty\\) indicates asymptotic length absence diffusion. average growth rate given \\[ g(l) = k(L_\\infty^0 - l) \\] \\(L_\\infty = L_\\infty^0 + \\alpha/k\\) asymptotic length diffusion included. PDE allows us calculate temporal evolution single cohort fish born instant. numerically discretize size length bins \\({l_1, l_2, \\dots, l_{n_l}}\\) time zero place individuals smallest size bin. output simulation get impulse response matrix \\(\\mathbf{G}\\), element \\[G(l, ) = n(l,)dl\\] number fish size bin \\(l\\) (width \\(dl\\)) survived age \\(\\) initial pulse recruits.","code":""},{"path":"/articles/age_simulation.html","id":"spawning-season","dir":"Articles","previous_headings":"","what":"Spawning season","title":"Modelling of age-at-size data","text":"now need incorporate information spawning intensity varies year. describe function \\(S(\\tau)\\), \\(\\tau \\[0, 1]\\) represents fractional time year. expected number fish size \\(l\\) true age \\(\\) population given survey date, \\(t_{survey}\\), found weighting impulse response spawning intensity \\(S\\). Let \\(\\tau(t)\\) function returns fractional time year date \\(t\\). population structure, \\(\\mathbf{N}_{pop}\\), given : \\[ N_{pop}(l, | t_{survey}) = G(l, ) \\cdot S(\\tau(t_{survey} - )) \\] convolution integrates fate cohorts born throughout year single snapshot population. One way model relative intensity spawning throughout year von Mises probability density function: \\[ S(\\tau) = \\frac{e^{\\kappa \\cos(2\\pi(\\tau - \\mu))}}{2\\pi I_0(\\kappa)} \\] \\(\\mu\\) mean time year spawning, \\(\\kappa\\) concentration parameter, \\(I_0(\\kappa)\\) modified Bessel function first kind order zero, serves normalization constant.","code":""},{"path":"/articles/age_simulation.html","id":"annuli-from-true-age","dir":"Articles","previous_headings":"","what":"Annuli from true age","title":"Modelling of age-at-size data","text":"number \\(K\\) observed otolith rings deterministic function fish’s true age \\(\\) date survey, \\(t_{survey}\\). mapping, \\(\\mathcal{K}(, t_{survey})\\), defined : \\[ \\mathcal{K}(, t_{survey}) = \\sum_{y=Y_{birth}+1}^{Y_{survey}-1} \\mathbb{}(t_{ring,y} - t_{birth} \\ge a_{min}) \\] : \\(t_{birth} = t_{survey} - \\) birth date. \\(Y_{birth}\\) \\(Y_{survey}\\) years birth survey, respectively. \\(t_{ring,y}\\) date ring formation year \\(y\\). \\(a_{min}\\) minimum age required first ring form. \\(\\mathbb{}(\\cdot)\\) indicator function, 1 condition true 0 otherwise. expected number fish size \\(l\\) observed \\(K\\) rings, \\(\\mathbf{N}_{model}\\), obtained aggregating true population structure according age--ring mapping function: \\[ N_{model}(l, K | t_{survey}) = \\int_0^{a_{max}} N_{pop}(l, | t_{survey}) \\cdot \\mathbb{}(\\mathcal{K}(, t_{survey}) = K) \\, da \\] discrete-time implementation, integral becomes sum age steps \\(a_i\\) \\(\\mathcal{K}(a_i, t_{survey}) = K\\).","code":""},{"path":"/articles/age_simulation.html","id":"predicted-age-distribution","dir":"Articles","previous_headings":"","what":"Predicted age distribution","title":"Modelling of age-at-size data","text":"given survey date \\(t_{survey}\\), probability fish size class \\(l\\) \\(K\\) rings : \\[ P(K | l, t_{survey}) = \\frac{N_{model}(l, K | t_{survey})}{\\sum_{K'} N_{model}(l, K' | t_{survey})} \\]","code":""},{"path":"/articles/age_simulation.html","id":"likelihood-of-observed-data","dir":"Articles","previous_headings":"","what":"Likelihood of observed data","title":"Modelling of age-at-size data","text":"Let empirical data survey date \\(t_{survey,j}\\) consist set counts \\(C(K|l,j)\\). Let \\(n_{l,j}\\) number fish sampled size class \\(l\\). model observations draw multinomial distribution size class survey: \\[ (C(K=0|l,j), C(K=2|l,j), ..., C(K = n_K|l,j) \\sim \\text{Multinomial}(n_{l,j}, \\mathbf{p}_{l,j}) \\] \\(\\mathbf{p}_{l,j}\\) vector probabilities \\([P(K=0|l, t_{survey,j}), P(K=1|l, t_{survey,j}), ...]\\). total negative log likelihood observations \\[ NLL = \\sum_j\\sum_l\\sum_k C_{K=k|l,j} \\log(P(K=k|l, t_{survey,j}). \\]","code":""},{"path":"/articles/length_to_weight.html","id":"objective","dir":"Articles","previous_headings":"","what":"Objective","title":"Conversion from length to weight","text":"convert PDE density \\(u(l,t)\\) function length \\(l\\) individuals PDE density \\(N(w,t)\\) function weight \\(w\\) individuals, using transformation \\(w = l^b\\).","code":""},{"path":"/articles/length_to_weight.html","id":"initial-equations","dir":"Articles","previous_headings":"","what":"1. Initial Equations","title":"Conversion from length to weight","text":"PDE density \\(u(l,t)\\) function length : \\[ \\frac{\\partial u}{\\partial t} = - \\frac{\\partial J}{\\partial l} - \\frac{m}{l} u \\] flux \\(J\\) \\[ J = k (L_\\infty  - l) u - \\frac{\\partial (d l u)}{\\partial l}. \\] \\(k, L_\\infty, c\\) \\(m\\) model parameters.","code":""},{"path":"/articles/length_to_weight.html","id":"transformation-of-variables-and-densities","dir":"Articles","previous_headings":"","what":"2. Transformation of Variables and Densities","title":"Conversion from length to weight","text":"want transform weight using \\(w = l^b\\). can express \\(l\\) terms \\(w\\) \\[ l = \\left(\\frac{w}{}\\right)^{1/b}. \\] Jacobian variable transformation \\[ \\frac{dw}{dl} = ab l^{b-1}. \\] Densities related conservation probability, \\(u(l,t) \\, dl = N(w,t) \\, dw\\), gives \\[ u = N \\frac{dw}{dl} = N (ab l^{b-1}). \\]","code":""},{"path":"/articles/length_to_weight.html","id":"transformation-of-the-pde-structure","dir":"Articles","previous_headings":"","what":"3. Transformation of the PDE Structure","title":"Conversion from length to weight","text":"original PDE conservation law, \\(\\frac{\\partial u}{\\partial t} + \\frac{\\partial J}{\\partial l} = - \\frac{m}{l} u\\). Using chain rule, structure transforms \\[ \\frac{\\partial N}{\\partial t} + \\frac{\\partial J}{\\partial w} = - \\frac{m}{l} N. \\] goal now express flux \\(J\\) sink term entirely terms \\(w, N,\\) derivatives. transformed sink term \\[ - \\frac{m}{l} N = -m \\left(\\frac{w}{}\\right)^{-1/b} N = -m ^{1/b} w^{-1/b} N. \\]","code":""},{"path":"/articles/length_to_weight.html","id":"deriving-and-rewriting-the-flux-jw","dir":"Articles","previous_headings":"","what":"4. Deriving and Rewriting the Flux J(w)","title":"Conversion from length to weight","text":"substitute \\(u = N \\frac{dw}{dl}\\) original expression \\(J\\): \\[ J = k (L_\\infty  - l) N \\frac{dw}{dl} - \\frac{\\partial}{\\partial l} \\left(d l N \\frac{dw}{dl} \\right). \\] Using identity \\(l \\frac{dw}{dl} = l(ab l^{b-1}) = ab l^b = bw\\), term derivative becomes \\(c b w N\\). apply chain rule \\(\\frac{\\partial}{\\partial l} = \\frac{dw}{dl}\\frac{\\partial}{\\partial w}\\): \\[ J = k (L_\\infty  - l) N \\frac{dw}{dl} - \\frac{dw}{dl} \\frac{\\partial (d b w N)}{\\partial w}. \\] Factoring Jacobian \\(\\frac{dw}{dl}\\) gives \\[ J = \\frac{dw}{dl} \\left[ k (L_\\infty  - l) N - \\frac{\\partial (d b w N)}{\\partial w} \\right]. \\] Now, substitute \\(l = \\left(\\frac{w}{}\\right)^{1/b}\\) \\(\\frac{dw}{dl} = ab l^{b-1} = ^{1/b} b w^{(b-1)/b}\\) let \\(n = 1-1/b = (b-1)/b\\). gives \\[ J(w) = \\left( ^{1/b} b w^n \\right) \\left[ k \\left(L_\\infty  - \\left(\\frac{w}{}\\right)^{1/b}\\right) N - \\frac{\\partial (d b w N)}{\\partial w} \\right]. \\] Next, fully expand expression \\(J(w)\\): \\[ J(w) = \\left[ (^{1/b} b k L_\\infty ) w^n N - (b k w) N \\right] - \\left( ^{1/b} b w^n \\right) \\frac{\\partial (d b w N)}{\\partial w}. \\] Expanding derivative distributing pre-factor gives \\[ J(w) = (^{1/b} b k L_\\infty ) w^n N - (b k w) N - (^{1/b} d b^2) w^n N - (^{1/b} d b^2) w^{n+1} \\frac{\\partial N}{\\partial w}. \\] Combining terms multiply \\(N\\), get fully expanded derived flux \\[ J(w) = \\left[ (^{1/b} b k L_\\infty  - ^{1/b} d b^2) w^n - (b k) w \\right] N - (^{1/b} d b^2) w^{n+1} \\frac{\\partial N}{\\partial w}. \\] like write flux simplfied form \\[ J_{target} = (w^n - B w) N - \\frac{\\partial(D w^{n+1} N)}{\\partial w}, \\] new parameters \\(,B\\) \\(D\\) expressed terms old parameters \\(k,L_\\infty\\) \\(d\\) new exponent \\(n\\) expressed terms exponent \\(b\\). expand target form using chain rule derivative get \\[ \\begin{split} J_{target} &= (w^n - B w) N - \\left( D(n+1)w^n N + D w^{n+1} \\frac{\\partial N}{\\partial w} \\right)\\\\ &= \\left[ (- D(n+1)) w^n - B w \\right] N - D w^{n+1} \\frac{\\partial N}{\\partial w}. \\end{split} \\] equating coefficients derived form target form, find constants: \\(\\frac{\\partial N}{\\partial w}\\) term: \\[D w^{n+1} = (^{1/b} c b^2) w^{n+1} \\implies D = ^{1/b} c b^2.\\] \\(wN\\) term: \\[B w = (b k) w \\implies B = bk.\\] \\(w^n N\\) term: \\[- D(n+1) = ^{1/b} b k L_\\infty  - ^{1/b} c b^2\\] implies \\[\\begin{split} &= ^{1/b} b k L_\\infty  - ^{1/b} c b^2 + D(n+1)\\\\ &= ^{1/b} b k L_\\infty  - ^{1/b} c b^2 + (^{1/b} c b^2)(n+1) \\\\ &= ^{1/b} b k L_\\infty  + n(^{1/b} c b^2)\\\\ &=^{1/b}\\left(b k L_\\infty  + n  c b^2\\right). \\end{split}\\]","code":""},{"path":"/articles/length_to_weight.html","id":"final-result","dir":"Articles","previous_headings":"","what":"5. Final Result","title":"Conversion from length to weight","text":"transformed PDE \\[ \\frac{\\partial N}{\\partial t} = - \\frac{\\partial J}{\\partial w} - \\frac{m}{l} N. \\] Substituting rewritten flux transformed sink term yields final equation: \\[ \\frac{\\partial N}{\\partial t} = - \\frac{\\partial}{\\partial w} \\left[ (w^n - B w) N - \\frac{\\partial(D w^{n+1} N)}{\\partial w} \\right] - M w^{n-1} N, \\] constants defined : \\[\\begin{split} n &= 1 - 1/b\\\\ &= ^{1/b}\\left(b k L_\\infty  + n  c b^2\\right)\\\\ B &= b k\\\\ D &= ^{1/b} c b^2\\\\ M &= ^{1/b}m \\end{split}\\]","code":""},{"path":"/articles/numerical_scheme.html","id":"advection-diffusion-reaction-pde","dir":"Articles","previous_headings":"","what":"Advection-diffusion-reaction PDE","title":"Numerical scheme for solving PDE","text":"First, rewrite PDE standard advection-diffusion-reaction form. Expanding flux term gives: \\[ J = \\left(k (L_\\infty - l) - \\frac{d}{2}\\right) u - \\frac{dl}{2} \\frac{\\partial u}{\\partial l}. \\] allows us identify size-dependent advection velocity \\(v(l)\\) diffusion coefficient \\(D(l)\\): Advection velocity: \\(v(l) = k (L_\\infty - l) - \\frac{d}{2}\\) Diffusion coefficient: \\(D(l) = \\frac{dl}{2}\\) PDE becomes \\[ \\frac{\\partial u}{\\partial t} + \\frac{\\partial}{\\partial l} \\left( v(l) u - D(l) \\frac{\\partial u}{\\partial l} \\right) = - \\mu(l) u. \\]","code":""},{"path":"/articles/numerical_scheme.html","id":"discretization","dir":"Articles","previous_headings":"","what":"Discretization","title":"Numerical scheme for solving PDE","text":"discretize spatial domain cells uniform width \\(\\Delta l\\), cell centers \\(l_i\\). Using finite volume method implicit (Backward Euler) time-stepping unconditional stability gives: \\[\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + \\frac{J_{+1/2}^{n+1} - J_{-1/2}^{n+1}}{\\Delta l} = - \\mu_i u_i^{n+1}\\] superscript \\(n\\) denotes time step. flux \\(J_{+1/2}^{n+1}\\) discretized using first-order upwind scheme advection central difference diffusion: \\[J_{+1/2}^{n+1} = \\left( v_{+1/2}^+ u_i^{n+1} + v_{+1/2}^- u_{+1}^{n+1} \\right) - D_{+1/2} \\frac{u_{+1}^{n+1} - u_i^{n+1}}{\\Delta l}\\] \\(v^+ = \\max(v, 0)\\) \\(v^- = \\min(v, 0)\\).","code":""},{"path":"/articles/numerical_scheme.html","id":"the-linear-system","dir":"Articles","previous_headings":"","what":"The Linear System","title":"Numerical scheme for solving PDE","text":"Substituting flux discrete equation yields tridiagonal linear system unknown vector \\(\\mathbf{u}^{n+1}\\): \\[\\mathbf{u}^{n+1} = \\mathbf{u}^n\\] non-zero entries matrix \\(\\) row \\(\\) : Sub-diagonal: \\(A_{, -1} = -\\frac{\\Delta t}{\\Delta l} \\left( v_{-1/2}^+ + \\frac{D_{-1/2}}{\\Delta l} \\right)\\) Diagonal: \\(A_{, } = 1 + \\Delta t \\mu_i + \\frac{\\Delta t}{\\Delta l} \\left( v_{+1/2}^+ - v_{-1/2}^- \\right) + \\frac{\\Delta t}{(\\Delta l)^2} \\left( D_{+1/2} + D_{-1/2} \\right)\\) Super-diagonal: \\(A_{, +1} = \\frac{\\Delta t}{\\Delta l} \\left( v_{+1/2}^- - \\frac{D_{+1/2}}{\\Delta l} \\right)\\)","code":""},{"path":"/articles/numerical_scheme.html","id":"boundary-conditions","dir":"Articles","previous_headings":"","what":"Boundary Conditions","title":"Numerical scheme for solving PDE","text":"boundary conditions modify first last rows matrix \\(\\). -Flux \\(l_0=0\\): condition applies interface \\(l_{1/2}\\). equation first cell (\\(=1\\)), set incoming flux \\(J_{1/2}^{n+1} = 0\\). eliminates dependence \\(u_0\\) term modifies coefficients \\(A_{1,1}\\) \\(A_{1,2}\\) first row system. Dirichlet \\(l_{max}\\): condition \\(u(l_{max}, t)=0\\) imposed right-interface, \\(l_{N_l+1/2}\\). handled introducing “ghost cell” (\\(=N_l+1\\)) setting concentration \\(u_{N_l+1}^{n+1} = 0\\) time steps. value used calculate outgoing flux \\(J_{N_l+1/2}^{n+1}\\) equation last cell (\\(=N_l\\)), modifying final row system.","code":""},{"path":"/articles/numerical_scheme.html","id":"solving-with-the-thomas-algorithm","dir":"Articles","previous_headings":"","what":"Solving with the Thomas Algorithm","title":"Numerical scheme for solving PDE","text":"tri-diagonal system solved efficiently O(N) time using Thomas algorithm, simplified form Gaussian elimination. Let system generic vector \\(\\mathbf{x}\\) written \\(a_{-1}x_{-1} + b_i x_i + c_i x_{+1} = d_i\\). algorithm consists two sweeps: first row (\\(=1\\)): \\[c'_1 = \\frac{c_1}{b_1} \\quad \\text{} \\quad d'_1 = \\frac{d_1}{b_1}\\] subsequent rows (\\(= 2, ..., N\\)): \\[m = b_i - a_{-1} c'_{-1}\\] \\[c'_i = \\frac{c_i}{m} \\quad \\text{} \\quad d'_i = \\frac{d_i - a_{-1} d'_{-1}}{m}\\] transforms system upper bidiagonal form: \\(x_i + c'_i x_{+1} = d'_i\\). last row (\\(=N\\)): \\[x_N = d'_N\\] preceding rows (\\(= N-1, ..., 1\\)): \\[x_i = d'_i - c'_i x_{+1}\\] method numerically stable diagonally dominant matrices, case implicit scheme.","code":""},{"path":"/articles/numerical_scheme.html","id":"stability-analysis","dir":"Articles","previous_headings":"","what":"Stability Analysis","title":"Numerical scheme for solving PDE","text":"stability method demonstrated using von Neumann stability analysis frozen coefficients. amplification factor \\(G = \\hat{u}^{n+1}/\\hat{u}^n\\) Fourier mode must satisfy \\(|G| \\le 1\\) stability. given : \\[G = \\frac{1}{A_{,-1} e^{-\\phi} + A_{,} + A_{,+1} e^{\\phi}}\\] \\(\\phi = k_w \\Delta l\\) phase angle \\(k_w\\) wavenumber. denominator G, \\(D_G\\), can shown : \\[D_G = 1 + \\Delta t \\mu + \\frac{\\Delta t}{\\Delta l} \\left( |v| - v\\cos\\phi \\right) + \\frac{2 \\Delta t D}{(\\Delta l)^2} \\left( 1 - \\cos\\phi \\right) + \\frac{\\Delta t v}{\\Delta l} \\sin\\phi\\] real part denominator : \\[\\text{Re}(D_G) = 1 + \\Delta t \\mu + \\frac{\\Delta t}{\\Delta l} \\underbrace{\\left( |v| - v\\cos\\phi \\right)}_{\\ge 0} + \\frac{2 \\Delta t D}{(\\Delta l)^2} \\underbrace{\\left( 1 - \\cos\\phi \\right)}_{\\ge 0}\\] Since \\(\\mu \\ge 0\\), \\(D \\ge 0\\), indicated terms always non-negative, follows \\(\\text{Re}(D_G) \\ge 1\\). magnitude squared denominator \\(|D_G|^2 = (\\text{Re}(D_G))^2 + (\\text{Im}(D_G))^2\\). Since \\(\\text{Re}(D_G) \\ge 1\\), : \\[|D_G|^2 \\ge 1^2 = 1\\] Therefore, amplification factor \\(|G| = 1/|D_G| \\le 1\\). holds choice \\(\\Delta t > 0\\) \\(\\Delta l > 0\\), meaning scheme unconditionally stable, even diffusion zero (\\(d=0\\)).","code":""},{"path":"/articles/numerical_scheme.html","id":"greens-function","dir":"Articles","previous_headings":"","what":"Green’s function","title":"Numerical scheme for solving PDE","text":"Green’s function obtained setting initial condition individuals smallest size class: \\(u_1^0 = 1\\) \\(u_i^0 = 0\\) \\(> 1\\).","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jessica Westworth. Maintainer, author. Gustav Delius. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Westworth J, Delius G (2025). growthEstimation: Estimating growth rate parameters age--size data. R package version 0.1.2, https://github.com/gustavdelius/growthEstimation.","code":"@Manual{,   title = {growthEstimation: Estimating growth rate parameters from age-at-size data},   author = {Jessica Westworth and Gustav Delius},   year = {2025},   note = {R package version 0.1.2},   url = {https://github.com/gustavdelius/growthEstimation}, }"},{"path":"/reference/Cod_CS_age_at_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Example age_at_length data for Cod in the Celtic Sea. — Cod_CS_age_at_length","title":"Example age_at_length data for Cod in the Celtic Sea. — Cod_CS_age_at_length","text":"Example age_at_length data Cod Celtic Sea.","code":""},{"path":"/reference/Cod_CS_age_at_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example age_at_length data for Cod in the Celtic Sea. — Cod_CS_age_at_length","text":"","code":"Cod_CS_age_at_length"},{"path":"/reference/Cod_CS_age_at_length.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example age_at_length data for Cod in the Celtic Sea. — Cod_CS_age_at_length","text":"data frame 329 rows 4 columns. columns ae: survey_date within-year date survey (decimal year) Length Length (cm) K Number observed annuli count Number fish observed given length annuli","code":""},{"path":"/reference/Cod_CS_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Example parameter set for Cod in the Celtic Sea. — Cod_CS_pars","title":"Example parameter set for Cod in the Celtic Sea. — Cod_CS_pars","text":"Example parameter set Cod Celtic Sea.","code":""},{"path":"/reference/Cod_CS_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example parameter set for Cod in the Celtic Sea. — Cod_CS_pars","text":"","code":"Cod_CS_pars"},{"path":"/reference/Cod_CS_pars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example parameter set for Cod in the Celtic Sea. — Cod_CS_pars","text":"named list scalar numeric parameters used growth age--length likelihood functions. Typical entries : k Growth rate parameter L_inf Asymptotic length d Diffusion/variability parameter m Mortality parameter spawning_mu Mean spawning date within year (decimal year [0,1)) spawning_kappa Concentration spawning timing (Von Mises kappa) annuli_date Within-year date annuli laid (decimal year) annuli_min_age Minimum age (years) first annulus counted","code":""},{"path":"/reference/calculate_K.html","id":null,"dir":"Reference","previous_headings":"","what":"Age-to-Ring Mapping Function Calculate_K(a) Deterministically maps true age to the expected annuli count, given a survey date, an annual ring-formation day, and a minimum age threshold. — calculate_K","title":"Age-to-Ring Mapping Function Calculate_K(a) Deterministically maps true age to the expected annuli count, given a survey date, an annual ring-formation day, and a minimum age threshold. — calculate_K","text":"Age--Ring Mapping Function Calculate_K() Deterministically maps true age expected annuli count, given survey date, annual ring-formation day, minimum age threshold.","code":""},{"path":"/reference/calculate_K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age-to-Ring Mapping Function Calculate_K(a) Deterministically maps true age to the expected annuli count, given a survey date, an annual ring-formation day, and a minimum age threshold. — calculate_K","text":"","code":"calculate_K(age_in_years, survey_date, annuli_date, annuli_min_age)"},{"path":"/reference/calculate_K.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age-to-Ring Mapping Function Calculate_K(a) Deterministically maps true age to the expected annuli count, given a survey date, an annual ring-formation day, and a minimum age threshold. — calculate_K","text":"age_in_years numeric vector true ages years. survey_date survey date numeric year (e.g., 2023.25). annuli_date Ring formation day fraction year [0, 1). annuli_min_age minimum age (years) required form first ring.","code":""},{"path":"/reference/calculate_K.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age-to-Ring Mapping Function Calculate_K(a) Deterministically maps true age to the expected annuli count, given a survey date, an annual ring-formation day, and a minimum age threshold. — calculate_K","text":"integer vector calculated number rings (K) age.","code":""},{"path":"/reference/calculate_and_aggregate_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and Aggregate Signed Log-Likelihood Contributions — calculate_and_aggregate_likelihood","title":"Calculate and Aggregate Signed Log-Likelihood Contributions — calculate_and_aggregate_likelihood","text":"Loops surveys, calculates signed NLL , aggregates results.","code":""},{"path":"/reference/calculate_and_aggregate_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and Aggregate Signed Log-Likelihood Contributions — calculate_and_aggregate_likelihood","text":"","code":"calculate_and_aggregate_likelihood(   surveys,   G,   a,   l,   mu,   kappa,   annuli_date,   annuli_min_age )"},{"path":"/reference/calculate_and_aggregate_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and Aggregate Signed Log-Likelihood Contributions — calculate_and_aggregate_likelihood","text":"surveys data frame survey age--length observations columns survey_date, Length, K, count. G Greens function matrix (rows = ages, cols = length classes). Numeric vector high-resolution ages corresponding rows G. l Numeric vector lengths corresponding columns G. mu Mean spawning date fraction year [0, 1). kappa Spawning concentration parameter. annuli_date Ring formation day fraction year [0, 1). annuli_min_age Minimum age (years) first ring can form.","code":""},{"path":"/reference/calculate_and_aggregate_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and Aggregate Signed Log-Likelihood Contributions — calculate_and_aggregate_likelihood","text":"data frame containing, observed Length-K bin survey, observed count, expected count model, model probability, sample size, negative log-likelihood contribution, signed negative log-likelihood contribution.","code":""},{"path":"/reference/fit_tmb_nll.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit growth parameters by minimizing the negative log likelihood with TMB — fit_tmb_nll","title":"Fit growth parameters by minimizing the negative log likelihood with TMB — fit_tmb_nll","text":"Optimizes k, L_inf, d, m, annuli_min_age using nlminb(). Spawning parameters annuli_date treated data.","code":""},{"path":"/reference/fit_tmb_nll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit growth parameters by minimizing the negative log likelihood with TMB — fit_tmb_nll","text":"","code":"fit_tmb_nll(   pars,   surveys,   Delta_l = 1,   Delta_t = 0.05,   lower = c(),   upper = c() )"},{"path":"/reference/fit_tmb_nll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit growth parameters by minimizing the negative log likelihood with TMB — fit_tmb_nll","text":"pars List parameters surveys Data frame columns survey_date (numeric), Length, K, count. Delta_l Numeric size step (cm), default 1. Delta_t Numeric time step (years), default 0.05. lower Named numeric vector lower bounds. upper Named numeric vector upper bounds.","code":""},{"path":"/reference/fit_tmb_nll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit growth parameters by minimizing the negative log likelihood with TMB — fit_tmb_nll","text":"list updated pars, optimizer result, sdreport, obj, data used.","code":""},{"path":"/reference/generate_model_predictions_for_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate model predictions for a specific survey date — generate_model_predictions_for_date","title":"Generate model predictions for a specific survey date — generate_model_predictions_for_date","text":"Calculates probability P(K | length) fish given length class observed K annuli.","code":""},{"path":"/reference/generate_model_predictions_for_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate model predictions for a specific survey date — generate_model_predictions_for_date","text":"","code":"generate_model_predictions_for_date(   survey_date,   G,   a,   l,   mu,   kappa,   annuli_date,   annuli_min_age )"},{"path":"/reference/generate_model_predictions_for_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate model predictions for a specific survey date — generate_model_predictions_for_date","text":"survey_date Numeric survey date (e.g., 2023.25). G Greens function matrix (rows = ages, cols = length classes). Numeric vector high-resolution ages corresponding rows G. l Numeric vector lengths corresponding columns G. mu Mean spawning date fraction year [0, 1). kappa Spawning concentration parameter. annuli_date Ring formation day fraction year [0, 1). annuli_min_age Minimum age (years) first ring can form.","code":""},{"path":"/reference/generate_model_predictions_for_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate model predictions for a specific survey date — generate_model_predictions_for_date","text":"matrix probabilities P(K|l) rows named Length columns K.","code":""},{"path":"/reference/generate_model_predictions_for_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate model predictions for a specific survey date — generate_model_predictions_for_date","text":"","code":"# Minimal schematic example (using toy inputs) a <- seq(0, 3, length.out = 5) l <- seq(10, 30, length.out = 3) G <- matrix(abs(sin(outer(a, l, \"+\"))), nrow = length(a)) generate_model_predictions_for_date(2023.5, G, a, l, mu = 0.5, kappa = 3,                                     annuli_date = 0.25, annuli_min_age = 0.5) #>       K #> Length         0          1           2         3 #>     10 0.5281034 0.04898685 0.015036502 0.4078732 #>     20 0.5015673 0.02652226 0.007001495 0.4649090 #>     30 0.4806103 0.01506286 0.017937671 0.4863892"},{"path":"/reference/getGreens.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Green's function for fish abundance PDE — getGreens","title":"Calculate Green's function for fish abundance PDE — getGreens","text":"Solves PDE initial condition individuals smallest size class.","code":""},{"path":"/reference/getGreens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Green's function for fish abundance PDE — getGreens","text":"","code":"getGreens(pars, l_max, Delta_l = 1, t_max = 10, Delta_t = 0.05)"},{"path":"/reference/getGreens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Green's function for fish abundance PDE — getGreens","text":"pars list containing model parameters: k, L_inf, d, m. l_max maximum size Delta_l size step size (cm). t_max maximum simulation time. Delta_t time step size (years). Default 0.05.","code":""},{"path":"/reference/getGreens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Green's function for fish abundance PDE — getGreens","text":"matrix holding Green's function G(t,l). Rows correspond time columns length.","code":""},{"path":"/reference/getLogLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Get log likelihood of age observations — getLogLik","title":"Get log likelihood of age observations — getLogLik","text":"Get log likelihood age observations","code":""},{"path":"/reference/getLogLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get log likelihood of age observations — getLogLik","text":"","code":"getLogLik(pars, surveys, Delta_l = 1, Delta_t = 0.05)"},{"path":"/reference/getLogLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get log likelihood of age observations — getLogLik","text":"pars list containing model parameters: k, L_inf, d, m. surveys data frame survey age--length observations columns survey_date, Length, K, count. Delta_l Width size bins (cm). Default 1. Delta_t Time step model simulation (years). Default 0.05.","code":""},{"path":"/reference/getLogLik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get log likelihood of age observations — getLogLik","text":"data frame , observed Length-K bin survey, observed count, expected count model, model probability, sample size, negative log-likelihood contribution, signed negative log-likelihood contribution.","code":""},{"path":"/reference/getNumberDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number density as a function of length and time — getNumberDensity","title":"Get number density as a function of length and time — getNumberDensity","text":"Convolves Green's function obtained getGreens() spawning density spawning_density() produce number density function length time.","code":""},{"path":"/reference/getNumberDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number density as a function of length and time — getNumberDensity","text":"","code":"getNumberDensity(   pars,   l_max,   Delta_l = 1,   t_max = 10,   Delta_t = 0.05,   single_cohort = TRUE )"},{"path":"/reference/getNumberDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number density as a function of length and time — getNumberDensity","text":"pars list containing model parameters: k, L_inf, d, m. l_max maximum size Delta_l size step size (cm). t_max maximum simulation time. Delta_t time step size (years). Default 0.05. single_cohort Logical; TRUE (default) include individuals born within first year.","code":""},{"path":"/reference/getNumberDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number density as a function of length and time — getNumberDensity","text":"matrix holding number density u(t,l). Rows correspond time columns length.","code":""},{"path":"/reference/getPeriodicNumberDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","title":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","text":"Calculates population density time assumption births happening negative years past, resulting perfectly periodic density period 1 year.","code":""},{"path":"/reference/getPeriodicNumberDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","text":"","code":"getPeriodicNumberDensity(pars, l_max, Delta_l = 1, t_max = 1, Delta_t = 0.05)"},{"path":"/reference/getPeriodicNumberDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","text":"pars list containing model parameters: k, L_inf, d, m. l_max maximum size Delta_l size step size (cm). t_max maximum simulation time. Delta_t time step size (years). Default 0.05.","code":""},{"path":"/reference/getPeriodicNumberDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","text":"matrix holding periodic number density u(t,l). Rows correspond time columns length. density periodic period 1 year.","code":""},{"path":"/reference/getPeriodicNumberDensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","text":"function extends convolution approach used getNumberDensity() include contributions past years exploiting periodicity spawning density function.","code":""},{"path":"/reference/getPeriodicNumberDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get periodic number density as a function of length and time — getPeriodicNumberDensity","text":"","code":"# Get periodic density for a simple parameter set pars <- list(k = 0.2, L_inf = 100, d = 0.1, m = 0.1,              spawning_mu = 0.5, spawning_kappa = 4) u_periodic <- getPeriodicNumberDensity(pars, l_max = 50, t_max = 2)"},{"path":"/reference/growthEstimation-package.html","id":null,"dir":"Reference","previous_headings":"","what":"growthEstimation: Estimating growth rate parameters from age-at-size data — growthEstimation-package","title":"growthEstimation: Estimating growth rate parameters from age-at-size data — growthEstimation-package","text":"Takes stochasticity growth rates account estimating growth rates.","code":""},{"path":[]},{"path":"/reference/growthEstimation-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"growthEstimation: Estimating growth rate parameters from age-at-size data — growthEstimation-package","text":"Maintainer: Jessica Westworth jew20@st-andrews.ac.uk Authors: Gustav Delius gustav.delius@york.ac.uk (ORCID)","code":""},{"path":"/reference/length_rebinning_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a length rebinning matrix — length_rebinning_matrix","title":"Build a length rebinning matrix — length_rebinning_matrix","text":"Computes fraction model length bin overlaps survey length bin, producing matrix suitable rebinning/aggregation.","code":""},{"path":"/reference/length_rebinning_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a length rebinning matrix — length_rebinning_matrix","text":"","code":"length_rebinning_matrix(l_model, l_survey)"},{"path":"/reference/length_rebinning_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a length rebinning matrix — length_rebinning_matrix","text":"l_model Numeric vector model bin edges (strictly increasing). l_survey Numeric vector survey bin edges (strictly increasing).","code":""},{"path":"/reference/length_rebinning_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a length rebinning matrix — length_rebinning_matrix","text":"matrix dimension (length(l_model) - 1) x (length(l_survey) - 1) entry fraction model bin width overlapping survey bin.","code":""},{"path":"/reference/plotAgeLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the likelihood of the observed age at length data — plotAgeLikelihood","title":"Plot the likelihood of the observed age at length data — plotAgeLikelihood","text":"Plot likelihood observed age length data","code":""},{"path":"/reference/plotAgeLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the likelihood of the observed age at length data — plotAgeLikelihood","text":"","code":"plotAgeLikelihood(pars, age_at_length)"},{"path":"/reference/plotAgeLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the likelihood of the observed age at length data — plotAgeLikelihood","text":"pars list parameters age_at_length Data frame raw age--length observations; preprocessed internally preprocess_length_at_age().","code":""},{"path":"/reference/plotAgeLikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the likelihood of the observed age at length data — plotAgeLikelihood","text":"ggplot2 object suitable display Shiny saving.","code":""},{"path":"/reference/plotAgeLikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the likelihood of the observed age at length data — plotAgeLikelihood","text":"","code":"# In practice provide a real `age_at_length` table for the species # p <- plotAge(pars, age_at_length = df)"},{"path":"/reference/plotDensity2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density function snapshots at yearly intervals — plotDensity2D","title":"Plot density function snapshots at yearly intervals — plotDensity2D","text":"Uses ggplot2 create 2D line plot u(l, t) snapshots yearly intervals, starting year 1. matrix returned getDensity() rows corresponding time steps (starting t = 0 first row) columns size classes.","code":""},{"path":"/reference/plotDensity2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density function snapshots at yearly intervals — plotDensity2D","text":"","code":"plotDensity2D(u, Delta_l = 1, Delta_t = 0.05, l_offset = 0, years = NULL)"},{"path":"/reference/plotDensity2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density function snapshots at yearly intervals — plotDensity2D","text":"u numeric matrix returned getDensity() (rows = time, columns = size). Delta_l Size step size used compute u. Delta_t Time step size used compute u. l_offset Optional offset added size axis labels (default 0). years Optional numeric vector years plot (integers). supplied, uses integers 1 largest full year covered simulation time.","code":""},{"path":"/reference/plotDensity2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density function snapshots at yearly intervals — plotDensity2D","text":"ggplot object.","code":""},{"path":"/reference/plotDensity2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density function snapshots at yearly intervals — plotDensity2D","text":"","code":"if (FALSE) { # \\dontrun{ pars <- list(k = 0.5, L_inf = 100, d = 0.01, m = 0.01) u <- getDensity(pars, l_max = 100, Delta_l = 1, t_max = 10, Delta_t = 0.1) plotDensity2D(u, Delta_l = 1, Delta_t = 0.1) } # }"},{"path":"/reference/plotDensity3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density function as an interactive 3D surface — plotDensity3D","title":"Plot density function as an interactive 3D surface — plotDensity3D","text":"Plot density function interactive 3D surface","code":""},{"path":"/reference/plotDensity3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density function as an interactive 3D surface — plotDensity3D","text":"","code":"plotDensity3D(u, Delta_l = 1, Delta_t = 0.05, l_min = 5, ...)"},{"path":"/reference/plotDensity3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density function as an interactive 3D surface — plotDensity3D","text":"u numeric matrix containing density (rows = time, columns = size). Delta_l Size step size used compute u. Delta_t Time step size used compute u. l_min Size plot start. ... arguments passed plotly::add_surface().","code":""},{"path":"/reference/plotDensity3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density function as an interactive 3D surface — plotDensity3D","text":"Plotly plot","code":""},{"path":"/reference/plotDensity3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density function as an interactive 3D surface — plotDensity3D","text":"","code":"if (FALSE) { # \\dontrun{ pars <- list(k = 0.5, L_inf = 100, d = 1, m = 0.2) u <- getDensity(pars, l_max = 100, Delta_l = 1, t_max = 10, Delta_t = 0.1) plotDensity3D(u, Delta_l = 1, Delta_t = 0.1) } # }"},{"path":"/reference/plot_log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot signed log-likelihood contributions with mean K lines — plot_log_likelihood","title":"Plot signed log-likelihood contributions with mean K lines — plot_log_likelihood","text":"Creates heatmap signed contribution cell NLL, overlays mean observed expected K values.","code":""},{"path":"/reference/plot_log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot signed log-likelihood contributions with mean K lines — plot_log_likelihood","text":"","code":"plot_log_likelihood(contributions_df)"},{"path":"/reference/plot_log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot signed log-likelihood contributions with mean K lines — plot_log_likelihood","text":"contributions_df data frame calculate_and_aggregate_likelihood.","code":""},{"path":"/reference/plot_log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot signed log-likelihood contributions with mean K lines — plot_log_likelihood","text":"ggplot object.","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. reshape2 melt","code":""},{"path":"/reference/simulate_sample_from_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a sample from model predictions — simulate_sample_from_model","title":"Simulate a sample from model predictions — simulate_sample_from_model","text":"Draws K values using multinomial sampling probabilities P(K | length) length observed given survey.","code":""},{"path":"/reference/simulate_sample_from_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a sample from model predictions — simulate_sample_from_model","text":"","code":"simulate_sample_from_model(P_model_K_given_l, survey_obs)"},{"path":"/reference/simulate_sample_from_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a sample from model predictions — simulate_sample_from_model","text":"P_model_K_given_l Matrix predicted probabilities P(K | length). survey_obs data frame one survey least Length column.","code":""},{"path":"/reference/simulate_sample_from_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a sample from model predictions — simulate_sample_from_model","text":"integer vector simulated K values aligned survey_obs rows.","code":""},{"path":"/reference/simulate_sample_from_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a sample from model predictions — simulate_sample_from_model","text":"","code":"set.seed(1) P <- matrix(c(0.7, 0.3, 0.2, 0.8), nrow = 2, byrow = TRUE) rownames(P) <- c(\"20\", \"30\"); colnames(P) <- c(\"0\", \"1\") survey_obs <- data.frame(Length = c(20, 20, 30, 30, 30)) simulate_sample_from_model(P, survey_obs) #> [1] 0 0 1 1 1"},{"path":"/reference/solve_pde.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerically solve the PDE for fish abundance density — solve_pde","title":"Numerically solve the PDE for fish abundance density — solve_pde","text":"Implements unconditionally stable finite volume scheme (implicit Euler) upwinding advection.","code":""},{"path":"/reference/solve_pde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerically solve the PDE for fish abundance density — solve_pde","text":"","code":"solve_pde(pars, u_initial, Delta_l = 1, t_max = 10, Delta_t = 0.05)"},{"path":"/reference/solve_pde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerically solve the PDE for fish abundance density — solve_pde","text":"pars list containing model parameters: k, L_inf, d, m. u_initial numeric vector initial condition u(l, 0). Delta_l size step size (cm). t_max maximum simulation time. Delta_t time step size (years). Default 0.05.","code":""},{"path":"/reference/solve_pde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numerically solve the PDE for fish abundance density — solve_pde","text":"matrix column solution u(t,l) given time step. Rows correspond time columns length.","code":""},{"path":"/reference/solve_thomas.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve a tridiagonal system of equations using the Thomas algorithm — solve_thomas","title":"Solve a tridiagonal system of equations using the Thomas algorithm — solve_thomas","text":"function solves system Ax = d, NxN tridiagonal matrix.","code":""},{"path":"/reference/solve_thomas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve a tridiagonal system of equations using the Thomas algorithm — solve_thomas","text":"","code":"solve_thomas(a, b, c, d)"},{"path":"/reference/solve_thomas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve a tridiagonal system of equations using the Thomas algorithm — solve_thomas","text":"numeric vector representing sub-diagonal . Must length N-1. b numeric vector representing main diagonal . Must length N. c numeric vector representing super-diagonal . Must length N-1. d numeric vector representing right-hand side vector. Must length N.","code":""},{"path":"/reference/solve_thomas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve a tridiagonal system of equations using the Thomas algorithm — solve_thomas","text":"numeric vector containing solution x.","code":""},{"path":"/reference/spawning_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Spawning Density Function S(d) — spawning_density","title":"Spawning Density Function S(d) — spawning_density","text":"Calculates relative spawning intensity numeric dates using von Mises density unit circle year.","code":""},{"path":"/reference/spawning_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spawning Density Function S(d) — spawning_density","text":"","code":"spawning_density(numeric_dates, mu, kappa)"},{"path":"/reference/spawning_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spawning Density Function S(d) — spawning_density","text":"numeric_dates vector numeric dates (e.g., 2023.45). fractional part used determine day--year. mu mean spawning date fraction year [0, 1). example, 0.5 mid-year. kappa concentration parameter spawning distribution.","code":""},{"path":"/reference/spawning_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spawning Density Function S(d) — spawning_density","text":"numeric vector relative spawning intensities length numeric_dates.","code":""},{"path":"/reference/spawning_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spawning Density Function S(d) — spawning_density","text":"","code":"# Peak at mid-year with moderate spread spawning_density(numeric_dates = c(2020.45, 2020.50, 2020.55),                  mu = 0.5, kappa = 4) #> [1] 0.6321530 0.7688573 0.6321530"},{"path":"/reference/tune_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively tune model parameters with a Shiny gadget — tune_pars","title":"Interactively tune model parameters with a Shiny gadget — tune_pars","text":"Launches small Shiny gadget sliders left sidebar numeric element pars live-updating plot plotAgeLikelihood(pars, age_at_length) main panel.","code":""},{"path":"/reference/tune_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively tune model parameters with a Shiny gadget — tune_pars","text":"","code":"tune_pars(pars, age_at_length)"},{"path":"/reference/tune_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively tune model parameters with a Shiny gadget — tune_pars","text":"pars named list scalar numeric parameters. Typical entries k, L_inf, d, m, spawning_mu, spawning_kappa, annuli_date, annuli_min_age. age_at_length data frame observed age--length data used plotAgeLikelihood() (see Cod_CS_age_at_length).","code":""},{"path":"/reference/tune_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactively tune model parameters with a Shiny gadget — tune_pars","text":"Invisibly returns final parameters gadget closed. gadget running displays plot interactively.","code":""},{"path":"/reference/tune_pars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactively tune model parameters with a Shiny gadget — tune_pars","text":"","code":"# Not run: requires interactive session # data(\"Cod_CS_age_at_length\") # data(\"Cod_CS_pars\") # tune_pars(Cod_CS_pars, Cod_CS_age_at_length)"},{"path":"/reference/von_mises_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises Probability Density Function — von_mises_pdf","title":"von Mises Probability Density Function — von_mises_pdf","text":"lightweight implementation used model circular seasonality (e.g., spawning day within year) without adding dependencies.","code":""},{"path":"/reference/von_mises_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises Probability Density Function — von_mises_pdf","text":"","code":"von_mises_pdf(x, mu, kappa)"},{"path":"/reference/von_mises_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises Probability Density Function — von_mises_pdf","text":"x Angle radians. mu Mean direction radians. kappa Concentration parameter (higher means concentrated).","code":""},{"path":"/reference/von_mises_pdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises Probability Density Function — von_mises_pdf","text":"probability density evaluated x.","code":""},{"path":"/reference/von_mises_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises Probability Density Function — von_mises_pdf","text":"","code":"# Density at angle pi when centered at pi with moderate concentration von_mises_pdf(pi, mu = pi, kappa = 2) #> [1] 0.5158854"}]
